#
# NOTICE: Influxdb must be started first, initially, to create the tokens for writing and reading data. These
# will be used by the data collector scripts and grafana.
# $ docker compose up influxdb
#
# $ docker-compose --env-file ./.env --profile prod up -d
# $ docker-compose --env-file ./.env --profile test up -d
# $ docker-compose --env-file ./.env --profile prod up -d
# $ docker-compose --env-file ./.env --profile prod up -d sunnyboydatacollector
# 
version: "3.7"
services:
  grafana:
    image: docker.io/grafana/grafana-oss:8.2.6
    network_mode: host
    profiles:
      - test
      - prod
    restart: always
    depends_on:
      - redis
      - influxdb
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=${GF_AUTH_ANONYMOUS_ENABLED}
      - GF_AUTH_ANONYMOUS_ORG_NAME=${GF_AUTH_ANONYMOUS_ORG_NAME}
    volumes:
      - "grafana_data:/var/lib/grafana"
      - "./grafana/plugins:/var/lib/grafana/plugins"
    
  influxdb: 
    image: docker.io/influxdb:2.7.0-alpine
    network_mode: host
    profiles:
      - test
      - prod
    restart: always
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - 'influxdb_data:/var/lib/influxdb2'

  redis:
    image: docker.io/bitnami/redis:7.0
    network_mode: host
    profiles:
      - test
      - prod
    restart: always
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - 'redis_data:/bitnami/redis/data'

  mosquitto:
    image: "eclipse-mosquitto:2.0.15"
    network_mode: host
    profiles:
      - test
      - prod
    restart: always
    volumes:
      - "./mosquitto/data:/mosquitto/data"
      - "./mosquitto/log:/mosquitto/log"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  yasdi2mqtt:
    image: "pkwagner/yasdi2mqtt:stable-alpine"
    network_mode: host
    depends_on:
      - mosquitto
    profiles:
      - prod
    restart: always
    volumes:
        - "./devices:/etc/yasdi2mqtt/devices"
        - "./yasdi.ini:/etc/yasdi2mqtt/yasdi.ini:ro"
    devices: 
        - "/dev/ttyUSB0:/dev/ttyUSB0"
    environment:
        YASDI_CONFIG: "/etc/yasdi2mqtt/yasdi.ini"
        YASDI_DRIVER_ID: 0
        YASDI_MAX_DEVICE_COUNT: 1
        YASDI_UPDATE_INTERVAL: ${YASDI_UPDATE_INTERVAL}
        MQTT_TOPIC_PREFIX: ${MQTT_TOPIC_PREFIX}
        MQTT_SERVER: ${MQTT_HOST}
        MQTT_PORT: 1883
        LOG_LEVEL: ${YASDI_LOG_LEVEL}

  sunnyislanddatacollector:
    container_name: sunnyislanddatacollector
    build:
      context: ./sunnyislanddatacollector
    network_mode: host
    depends_on:
      - redis
      - influxdb
      - mosquitto
    profiles:
      - test
      - prod
    environment: #20 = INFO, 10 = DEBUG, WARN = 30
        LOG_LEVEL: 10
    volumes:
      - "./logs:/var/log/app"
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 -u sunnyislanddatacollector.py --mqtttopic ${MQTT_TOPIC} --redishost ${REDIS_HOST} --redispassword ${REDIS_PASSWORD} --influxdbhost ${INFLUXDB_URL} --influxdbtoken ${INFLUXDB_TOKEN} --influxdborg ${INFLUXDB_ORG} --influxdbbucket ${INFLUXDB_BUCKET}

  mocksunnyislanddata:
    container_name: mocksunnyislanddata
    build:
      context: ./mocksunnyislanddata
    network_mode: host
    depends_on:
      - mosquitto
    profiles:
      - test
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 mocksunnyislanddatapublisher.py --mqtttopic ${MQTT_TOPIC}


  sunnyboydatacollector:
    container_name: sunnyboydatacollector
    build:
      context: ./sunnyboydatacollector
    network_mode: host
    depends_on:
      - redis
      - influxdb
    profiles:
      - prod
    environment: #20 = INFO, 10 = DEBUG, WARN = 30
        LOG_LEVEL: 20
        LOG_FILENAME: "/var/log/app/sunnyboydatacollector.out"
    volumes:
      - "./logs:/var/log/app"
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 -u sunnyboydatacollector.py --sunnyboyhost ${SUNNYBOY1_HOST} --invid ${SUNNYBOY1_INVID} --redishost ${REDIS_HOST} --redispassword ${REDIS_PASSWORD} --influxdbhost ${INFLUXDB_URL} --influxdbtoken ${INFLUXDB_TOKEN} --influxdborg ${INFLUXDB_ORG} --influxdbbucket ${INFLUXDB_BUCKET} --lat ${LAT} --lon ${LON} --repeat ${SUNNYBOY_REPEAT_INTERVAL}

  sunnyboydatacollector2:
    container_name: sunnyboydatacollector2
    build:
      context: ./sunnyboydatacollector
    network_mode: host
    depends_on:
      - redis
      - influxdb
    profiles:
      - prod
    environment: #20 = INFO, 10 = DEBUG, WARN = 30
        LOG_LEVEL: 20
        LOG_FILENAME: "/var/log/app/sunnyboydatacollector2.out"
    volumes:
      - "./logs:/var/log/app"
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 -u sunnyboydatacollector.py --sunnyboyhost ${SUNNYBOY2_HOST} --invid ${SUNNYBOY2_INVID} --redishost ${REDIS_HOST} --redispassword ${REDIS_PASSWORD} --influxdbhost ${INFLUXDB_URL} --influxdbtoken ${INFLUXDB_TOKEN} --influxdborg ${INFLUXDB_ORG} --influxdbbucket ${INFLUXDB_BUCKET} --lat ${LAT} --lon ${LON} --repeat ${SUNNYBOY_REPEAT_INTERVAL}


  #This container runs the same scripts as the sunnyboydatacollector container, but it passes the -t flag in when triggering the script.
  mocksunnyboydatacollector:
    container_name: mocksunnyboydatacollector
    build:
      context: ./sunnyboydatacollector
    network_mode: host
    depends_on:
      - redis
      - influxdb
    profiles:
      - test
    environment: #20 = INFO, 10 = DEBUG, WARN = 30
        LOG_LEVEL: 10
        LOG_FILENAME: "/var/log/app/mocksunnyboydatacollector.out"
    volumes:
      - "./logs:/var/log/app"
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 -u sunnyboydatacollector.py --sunnyboyhost ${SUNNYBOY1_HOST} --invid ${SUNNYBOY1_INVID} --redishost ${REDIS_HOST} --redispassword ${REDIS_PASSWORD} --influxdbhost ${INFLUXDB_URL} --influxdbtoken ${INFLUXDB_TOKEN} --influxdborg ${INFLUXDB_ORG} --influxdbbucket ${INFLUXDB_BUCKET} --lat ${LAT} --lon ${LON} --repeat ${SUNNYBOY_REPEAT_INTERVAL} -t

  mocksunnyboydatacollector2:
    container_name: mocksunnyboydatacollector2
    build:
      context: ./sunnyboydatacollector
    network_mode: host
    depends_on:
      - redis
      - influxdb
    profiles:
      - test
    environment: #20 = INFO, 10 = DEBUG, WARN = 30
        LOG_LEVEL: 10
        LOG_FILENAME: "/var/log/app/mocksunnyboydatacollector2.out"
    volumes:
      - "./logs:/var/log/app"
    command:
      - /bin/bash
      - -c
      - |
        cd /app
        python3 -u sunnyboydatacollector.py --sunnyboyhost ${SUNNYBOY2_HOST} --invid ${SUNNYBOY2_INVID} --redishost ${REDIS_HOST} --redispassword ${REDIS_PASSWORD} --influxdbhost ${INFLUXDB_URL} --influxdbtoken ${INFLUXDB_TOKEN} --influxdborg ${INFLUXDB_ORG} --influxdbbucket ${INFLUXDB_BUCKET} --lat ${LAT} --lon ${LON} --repeat ${SUNNYBOY_REPEAT_INTERVAL} -t


volumes:
  grafana_data:
    driver: local
  influxdb_data:
    driver: local
  redis_data:
    driver: local